'''Create latex source file for the schema data dictionary.

Creating a viable LaTeX source is surprisingly brittle because LaTeX's
overlaps with the psuedo-markdown used in `schema.data`. The following
issues were encountered during development and might come up in the future:

- Underscores in bare text (solved by putting this text in a verbatim
  or verb environment).

- Backslash-escaping; Every backslash in the LaTeX source is two
  backslashes in the Python source. When writing new LaTeX it's
  probably easiest to compose it and then s|\|\\| the new section.
'''

import re

import shared_schema.templates as templates


def escaped_description(desc):
    return re.sub(r'`(.+)`', r'\\verb|\1|', desc)


def field_data(field):
    escaped_desc = escaped_description(field.description)
    if escaped_desc and (escaped_desc[-1] not in "?.!"):
        escaped_desc = escaped_desc + '.'
        return {
            "fname": field.name,
            "ftype": field.type,
            "fdescription": escaped_desc,
        }


def entity_data(entity):
    fields = [field_data(f) for f in entity.fields]
    return {
        "ename": entity.name,
        "edescription": entity.description,
        "fields": fields,
    }


templates.register(
    'tex',
    templates.load_file('tex.mustache'),
)


def render_tmpl(schema_data, version):
    disclaimer = ("% This source was generated by `schema.tex`. "
                  "Don't edit it manually.")
    entities = [entity_data(e) for e in schema_data.raw_entities]
    return templates.render(
        'tex',
        {
            'disclaimer': disclaimer,
            'version': version,
            'entities': entities,
        }
    )


def make(schema_data, version, **kwargs):
    return render_tmpl(schema_data, version)
