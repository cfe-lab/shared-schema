'''Create latex source file for the schema data dictionary.

Creating a vialbe LaTeX source is surprisingly brittle because LaTeX's
overlaps with the psuedo-markdown used in `schema.data`. The following
issues were encountered during development and might come up in the future:

- Underscores in bare text (solved by putting this text in a verbatim
  or verb environment).

- Backslash-escaping; Every backslash in the LaTeX source is two
  backslashes in the Python source. When writing new LaTeX it's
  probably easiest to compose it and then s|\|\\| the new section.



'''

import re
import string

def escape_description(desc):
    return re.sub(r'`(.+)`', r'\\verb|\1|', desc)


field_tmpl = string.Template('''
\\verb|$name| & $type & $description \\\\
''')

def render_field(field):
    escaped_desc = escape_description(field.description)
    if escaped_desc:
        escaped_desc = escaped_desc + '.'
    return field_tmpl.substitute(
        name=field.name,
        type=field.type,
        description=escaped_desc,
    )


entity_tmpl = string.Template('''
\\begin{table*}
\\label{ent:$name}
\\centering
\\caption{ {\\large $name}: $description }

\\begin{tabular}{lp{4cm}p{10cm}}
Field Name & Type & Description \\\\
\\hline
$fields
\\end{tabular}
\\end{table*}
''')

def render_entity(entity):
    fields = "".join(render_field(f) for f in entity.fields)
    return entity_tmpl.substitute(
        name=entity.name,
        description=entity.description,
        fields=fields,
    )


tex_tmpl = string.Template('''%
% This source was generated by `schema.tex`. Don't edit it manually.
%
\\documentclass{article}

\\usepackage[margin=1in]{geometry}
\\usepackage{graphicx}
\\usepackage{lscape}
\\usepackage[T1]{fontenc}

\\author{SHARED Collaboration}
\\date{\\today}
\\title{SHARED HCV Resistance Database Data Dictionary, version $version}

\\begin{document}

\\maketitle

\\newpage

\\begin{table}
\\centering
\\caption{ Data Types}
\\begin{tabular}{cl}
Type & Description \\\\
\\hline
integer & A whole number. \\\\
float & A decimal number. \\\\
bool & True, False, or Null. \\\\
string & A piece of text. \\\\
date & A calendar date (Year, Month, and Day) \\\\
uuid & A non-sequential, randomly generated unique identifier. \\\\
enum & One of a given set of values (e.g. flavors = enum(chocolate, vanilla, strawberry)). \\\\
foreign key & A reference to a record in another table. \\\\
\\end{tabular}
\\end{table}

\\newpage

\\begin{landscape}
\\begin{figure}[h]
\\begin{center}
\\caption{Entity Relationships}
\\includegraphics[width=\\textheight]{./tmp/schema}
\\end{center}
\\end{figure}
\\end{landscape}

\\newpage

$entities

\\end{document}
''')

def render_tmpl(schema_data, version):
    entities = "\n".join(render_entity(e) for e in schema_data.raw_entities)
    return tex_tmpl.substitute(
        version=version,
        entities=entities,
    )


def make(schema_data, version):
    return render_tmpl(schema_data, version)
